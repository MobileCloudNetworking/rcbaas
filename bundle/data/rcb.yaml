heat_template_version: 2013-05-23

# Copyright 2014 Zuercher Hochschule fuer Angewandte Wissenschaften
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

description: |
  Deploys the RCB service instance resources.

parameters:
  image:
    type: string
    description: Server image id to use
    default: CyclopsMCNv2
    constraints:
    - allowed_values:
      - CyclopsMCNv2
      description: must be a valid cyclops image id

  flavor:
    description: Server flavor id to use
    type: string
    default: m1.medium
    constraints:
    - allowed_values:
      - m1.tiny
      - m1.small
      - m1.medium
      description: must be a valid OpenStack flavor.

  sshkey:
    description: The ssh key name to use with all SM VMs
    type: string
    default: dudo
    label: SSH Key
  
  network_id:
    description: The network to attach the RCB service to
    type: string
    default: 7bc6538f-1c7d-4648-88ef-cda5cdfe452e
    label: Network ID

  public_net:
    type: string
    description: >
      ID of public network net04_ext
    default: 1b31bc6b-8aff-4e13-912a-d9c9a427475a

  private_mgmt_net:
    type: string
    description: >
      ID of private network mgmt
    default: 7bc6538f-1c7d-4648-88ef-cda5cdfe452e

resources:
  rcb_si_security_group:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "RCB SI public ports"
      SecurityGroupIngress:
      - {"CidrIp": 0.0.0.0/0, "FromPort": "22", "ToPort": "22", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8080", "ToPort": "8080", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "80", "ToPort": "80", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "3000", "ToPort": "3000", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8086", "ToPort": "8086", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "8083", "ToPort": "8083", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "4567", "ToPort": "4567", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "5671", "ToPort": "5671", "IpProtocol": "tcp"}
      - {"CidrIp": 0.0.0.0/0, "FromPort": "6379", "ToPort": "6379", "IpProtocol": "tcp"}

  rcb_port_mgmt:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_mgmt_net }
      security_groups: [{ get_resource: rcb_si_security_group }]

  rcb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: rcb_port_mgmt }

  rcb_si:
    type: OS::Nova::Server
    properties:
      name: rcb_si
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: sshkey }
      networks:
        - port : { get_resource: rcb_port_mgmt }
      config_drive: "true"
      user_data: |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          export FIP=`curl -s -X GET http://169.254.169.254/2009-04-04/meta-data/public-ipv4`
          chmod +x /var/www/html/udr/bill/index.html
          chmod +x /usr/share/grafana/v1.9.0_rc1/config.js
          sed -i s/160.85.4.34/$FIP/ /var/www/html/udr/bill/index.html
          sed -i s/160.85.4.34/$FIP/ /usr/share/grafana/v1.9.0_rc1/config.js
          rm -fR /etc/rabbitmq/ssl
          rm -fR /etc/sensu/ssl
          wget http://sensuapp.org/docs/0.13/tools/ssl_certs.tar -P /tmp/udrservice
          tar -xvf /tmp/udrservice/ssl_certs.tar -C /tmp/udrservice
          cd /tmp/udrservice/ssl_certs && ./ssl_certs.sh generate
          mkdir -p /etc/rabbitmq/ssl && cp /tmp/udrservice/ssl_certs/sensu_ca/cacert.pem /tmp/udrservice/ssl_certs/server/cert.pem /tmp/udrservice/ssl_certs/server/key.pem /etc/rabbitmq/ssl
          mkdir /etc/sensu/ssl
          cp /tmp/udrservice/ssl_certs/client/cert.pem /tmp/udrservice/ssl_certs/client/key.pem /etc/sensu/ssl
          service rabbitmq-server restart
          rabbitmqctl add_vhost /sensu
          rabbitmqctl add_user sensu udrservice
          rabbitmqctl set_permissions -p /sensu sensu ".*" ".*" ".*"
          sudo service apache2 restart
          service sensu-server restart
          service sensu-client restart
          service sensu-api restart
          service uchiwa restart
          rm -fR /tmp/udrservice
      
outputs:
  mcn.endpoint.rcb.mgt:
    description: "IP addresses of the RCB service."
    value: { get_attr: [rcb_floating_ip, floating_ip_address] }
